// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String     @unique
  description     String
  mainDescription String
  icon            String
  timesPlayed     Int        @default(1)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  likes           Int        @default(0)
  dislikes        Int        @default(0)
  comments        Comment[]
  questions       Question[]
}

model Question {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  text                String
  answer              String
  choices             String[]
  answeredCorrectly   Int      @default(1)
  answeredIncorrectly Int      @default(1)
  quiz                Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId              String   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  author    String   @unique
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dislikes  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String   @db.ObjectId
}
